@inherits LayoutComponentBase

@implements IDisposable

@inject IHealthChecker _healthChecker;
@inject NavigationManager _navigationManager;

<div class="node-status @(_healthChecker.IsAvailable ? "success" : "failure")">
    <a @onclick="ViewSettings">
        <svg xmlns="http://www.w3.org/2000/svg"
             width="18" height="18"
             viewBox="0 0 24 24"
             fill="none"
             stroke="currentColor"
             stroke-width="1.5"
             stroke-linecap="round"
             stroke-linejoin="round"
             class="feather feather-settings">
            <circle xmlns="http://www.w3.org/2000/svg" cx="12" cy="12" r="3" />
            <path xmlns="http://www.w3.org/2000/svg" d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z" />
        </svg>
    </a>
    <svg xmlns="http://www.w3.org/2000/svg"
         width="18" height="18"
         viewBox="0 0 24 24"
         fill="none"
         stroke="currentColor"
         stroke-width="1.5"
         stroke-linecap="round"
         stroke-linejoin="round"
         class="feather @($"feather-{(_healthChecker.IsAvailable ? "check" : "x")}-circle")">
        @if (_healthChecker.IsAvailable)
        {
            <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
            <polyline points="22 4 12 14.01 9 11.01"></polyline>
        }
        else
        {
            <circle cx="12" cy="12" r="10"></circle>
            <line x1="15" y1="9" x2="9" y2="15"></line>
            <line x1="9" y1="9" x2="15" y2="15"></line>
        }
    </svg>
    <span>@PrimaryMessage</span>
    @if (_healthChecker.IsAvailable)
    {
        <a @onclick="ViewNodeInfo">
            <svg xmlns="http://www.w3.org/2000/svg"
                 width="18" height="18"
                 viewBox="0 0 24 24"
                 fill="none"
                 stroke="currentColor"
                 stroke-width="1.5"
                 stroke-linecap="round"
                 stroke-linejoin="round"
                 class="feather feather-info">
                <circle cx="12" cy="12" r="10" />
                <line x1="12" y1="16" x2="12" y2="12" />
                <line x1="12" y1="8" x2="12.01" y2="8" />
            </svg>
        </a>
    }
    <span>@SecondaryMessage</span>
</div>

<div class="content">
    @Body
</div>

@code {
    private string PrimaryMessage => _healthChecker.IsConnected ? _healthChecker.IsValid
        ? "Valid connection"
        : "Invalid connection"
        : "Disconnected";

    private string SecondaryMessage => _healthChecker.IsConnected
        ? $"Node v{_healthChecker.NodeVersion}"
        : "Ticket scanning unavailable";

    protected override void OnInitialized()
    {
        _healthChecker.OnPropertyChanged += async (s, e) => await InvokeAsync(StateHasChanged);
    }

    private void ViewNodeInfo()
    {
        _navigationManager.NavigateTo("/node");
    }

    private void ViewSettings()
    {
        _navigationManager.NavigateTo("/settings");
    }

    public void Dispose()
    {
        _healthChecker.OnPropertyChanged -= async (s, e) => await InvokeAsync(StateHasChanged);
    }
}